package com.angelozero.task.management.adapter.dataprovider;

import com.angelozero.task.management.adapter.dataprovider.mapper.PokemonDataProviderMapper;
import com.angelozero.task.management.adapter.dataprovider.rest.PokemonApiFeignClient;
import com.angelozero.task.management.entity.Pokemon;
import com.angelozero.task.management.usecase.exception.RestDataProviderException;
import com.angelozero.task.management.usecase.gateway.PokemonGateway;
import feign.FeignException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

import java.util.Random;

@Slf4j
@Service
@AllArgsConstructor
public class PokemonByRestDataProvider implements PokemonGateway {

    private final PokemonApiFeignClient pokemonApiFeignClient;
    private final PokemonDataProviderMapper pokemonDataProviderMapper;

    @Override
    public Pokemon findByName(String name) {
        try {
            var pokemonResponse = pokemonApiFeignClient.getPokemonByName(name);
            return pokemonDataProviderMapper.toPokemon(pokemonResponse);

        } catch (FeignException ex) {
            logMessageError(ex.getMessage(), ex.status());
            throw new RestDataProviderException("Fail to call Pokemon API - Error Message: " + ex.getMessage() + " - Status Code: " + ex.status());


        } catch (Exception ex) {
            logMessageError(ex.getMessage());
            throw new RestDataProviderException("Fail to call Pokemon API - Error Message: " + ex.getMessage());
        }
    }

    @Override
    public Pokemon findByNumber(Integer number) {
        try {
            var pokemonResponse = pokemonApiFeignClient.getPokemonByNumber(number);
            return pokemonDataProviderMapper.toPokemon(pokemonResponse);

        } catch (FeignException ex) {
            logMessageError(ex.getMessage(), ex.status());
            throw new RestDataProviderException("Fail to call Pokemon API - Error Message: " + ex.getMessage() + " - Status Code: " + ex.status());


        } catch (Exception ex) {
            logMessageError(ex.getMessage());
            throw new RestDataProviderException("Fail to call Pokemon API - Error Message: " + ex.getMessage());
        }
    }

    @Override
    @CircuitBreaker(name = "PokemonByRestDataProvider", fallbackMethod = "fallBackGetPokemonByDefault")
    public Pokemon findByRandomValue() {
        var randomNumber = new Random().nextInt((300) + 1);
        if (randomNumber > 150) {
            throw new RuntimeException("Test fail to circuit breaker!");
        }
        return findByNumber(randomNumber);
    }

    private Pokemon fallBackGetPokemonByDefault(Exception ex) {
        return new Pokemon(0, "This pokemon was generated by a fallback method", "No Art Work");
    }

    private void logMessageError(String errorMessage, int status) {
        log.error("Fail to call Pokemon API - Error Message: {} - Status Code: {}", errorMessage, status);
    }

    private void logMessageError(String errorMessage) {
        log.error("Fail to call Pokemon API - Error Message: {}", errorMessage);
    }
}
