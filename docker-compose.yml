version: '3.8'

services:
	mongo:
		platform: linux/arm64/v8
		image: mongo:4.4
		container_name: mongo_container_db
		ports:
			- "27017:27017"
		volumes:
			- mongo_data:/data/db
	#    environment:
	#      MONGO_INITDB_ROOT_USERNAME: root
	#      MONGO_INITDB_ROOT_PASSWORD: terra
	#      MONGO_INITDB_DATABASE: task-management-db

	redis:
		platform: linux/arm64/v8
		image: redis:7.0
		container_name: redis_cache
		ports:
			- "6379:6379"

	postgres_reader:
		platform: linux/arm64/v8
		image: postgres:15-alpine
		container_name: postgres_reader_db
		ports:
			- "5432:5432"
		environment:
			POSTGRES_USER: master
			POSTGRES_PASSWORD: terra
			POSTGRES_DB: datasource_read
		volumes:
			- postgres_reader_data:/var/lib/postgresql/data

	postgres_writer:
		platform: linux/arm64/v8
		image: postgres:15-alpine
		container_name: postgres_writer_db
		ports:
			- "5678:5432"
		environment:
			POSTGRES_USER: master
			POSTGRES_PASSWORD: terra
			POSTGRES_DB: datasource_write
		volumes:
			- postgres_writer_data:/var/lib/postgresql/data

	rabbitmq: # Novo servi√ßo para RabbitMQ
		platform: linux/arm64/v8
		image: rabbitmq:3-management-alpine
		container_name: rabbitmq_broker
		ports:
			- "5672:5672"
			- "15672:15672" #interface - http://localhost:15672
		volumes:
			- rabbitmq_data:/var/lib/rabbitmq
		environment:
			# Optional:
			RABBITMQ_DEFAULT_USER: user
			RABBITMQ_DEFAULT_PASS: password
			RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management listeners '[{port,15672}]'"

volumes:
	mongo_data:
	postgres_reader_data:
	postgres_writer_data:
	rabbitmq_data:

# para executar um contentor num MacOs Sonoma 14.2.1 Apple M1 adicione "platform: linux/arm64/v8"
# para executar o docker compose num MacOs Sonoma 14.2.1 Apple M1 use o comando docker-compose up -d
# para executar o docker compose no Ubuntu 24.04.2 LTS use o comando docker compose up -d